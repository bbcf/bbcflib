* Infrastructure
** DONE Make module docs show up in Sphinx documentation      :documentation:
** DONE Add 'mailer' to README as a dependency	      :documentation:
** DONE Create test_data directory and add to repository	       :test:
** DONE Write a configuration file test.cfg in test_data	       :test:
Use the following template:
    [genrep]
    genrep_url=
    genrep_root=

    [daflims]:
    daflims_username=
    daflims_password=

    [emailreport]:
    email_from_address=
    email_smtp_server=
    email_default_subject=

    [frontend]:
    frontend_url=
** DONE Add import of appropriate things from each module to __init__.py :organization:
from genrep, GenRep, Assembly
from daflims, DAFLIMS,
from mail, EmailReport,
from frontend, Frontend
and ConfigParser from ConfigParse
** DONE Create test.py to run against test_data.		       :test:
Load test_data/test.cfg as a ConfigParser for use in the tests.
** DONE Add test_suite field to setup.py to enable python setup.py test :test:
http://ericholscher.com/blog/2009/jun/29/enable-setuppy-test-your-django-apps/
http://peak.telecommunity.com/DevCenter/setuptools#test

** DONE Write docstring for __init__.py			      :documentation:
** TODO Reorganize documentation to be sanely readable	      :documentation:
* GenRep
** TODO Unit tests for genrep.py				       :test:
Test against http://bbcftools.vital-it.ch/genrep/
*** DONE Tests in test.py for GenRep.query_url			       :test:
*** DONE Get JSON from GenRep for assemblies and chromosomes on GenRep, prettyprint it. :test:
**** from http://bbcftools.vital-it.ch/genrep/assemblies.json
[
  {
    "assembly": {
      "name": "ce6",
      "bbcf_valid": true,
      "updated_at": "2010-12-20T07:47:55Z",
      "nr_assembly_id": 103,
      "genome_id": 8,
      "source_name": "UCSC",
      "id": 14,
      "md5": "75d3de3127a40c1aa5fd835ba35984d40f3405a2",
      "source_id": 4,
      "created_at": "2010-12-19T20:52:31Z"
    }
  },
  {
    "assembly": {
      "name": "dm3",
      "bbcf_valid": true,
      "updated_at": "2010-12-20T07:56:34Z",
      "nr_assembly_id": 104,
      "genome_id": 12,
      "source_name": "UCSC",
      "id": 13,
      "md5": "a5b17550727af419676aef920ba932597ca0d737",
      "source_id": 4,
      "created_at": "2010-12-19T20:51:37Z"
    }
  },
  {
    "assembly": {
      "name": "hg19",
      "bbcf_valid": true,
      "updated_at": "2010-12-17T21:29:01Z",
      "nr_assembly_id": 76,
      "genome_id": 5,
      "source_name": "UCSC",
      "id": 11,
      "md5": "bb27b89826b88823423282438077cdb836e1e6e5",
      "source_id": 4,
      "created_at": "2010-12-16T16:08:13Z"
    }
  },
  {
    "assembly": {
      "name": "mm9",
      "bbcf_valid": true,
      "updated_at": "2010-11-26T14:57:53Z",
      "nr_assembly_id": 70,
      "genome_id": 4,
      "source_name": "UCSC",
      "id": 7,
      "md5": "251fb5451eac220c459d419874582a3f4165e697",
      "source_id": 4,
      "created_at": "2010-04-29T08:23:09Z"
    }
  },
  {
    "assembly": {
      "name": "MSmeg_JS623",
      "bbcf_valid": false,
      "updated_at": "2010-12-20T12:11:34Z",
      "nr_assembly_id": null,
      "genome_id": 13,
      "source_name": "NCBI",
      "id": 16,
      "md5": null,
      "source_id": 3,
      "created_at": "2010-12-20T12:11:34Z"
    }
  },
  {
    "assembly": {
      "name": "MTb_H37Rv",
      "bbcf_valid": true,
      "updated_at": "2010-12-19T16:21:02Z",
      "nr_assembly_id": 72,
      "genome_id": 10,
      "source_name": "NCBI",
      "id": 8,
      "md5": "af7ab0cda6faea803b53ec27f74a92e89c88bd67",
      "source_id": 3,
      "created_at": "2010-07-27T14:42:07Z"
    }
  },
  {
    "assembly": {
      "name": "NA1000",
      "bbcf_valid": true,
      "updated_at": "2010-12-20T07:56:52Z",
      "nr_assembly_id": 105,
      "genome_id": 11,
      "source_name": "NCBI",
      "id": 15,
      "md5": "8c53bc420284d75648ef91df33bec1e11f54a1ea",
      "source_id": 3,
      "created_at": "2010-12-19T20:54:15Z"
    }
  },
  {
    "assembly": {
      "name": "NCBIM37",
      "bbcf_valid": false,
      "updated_at": "2010-07-31T15:00:08Z",
      "nr_assembly_id": 70,
      "genome_id": 4,
      "source_name": "NCBI",
      "id": 5,
      "md5": "251fb5451eac220c459d419874582a3f4165e697",
      "source_id": 3,
      "created_at": "2010-04-29T08:22:22Z"
    }
  },
  {
    "assembly": {
      "name": "sacCer1",
      "bbcf_valid": false,
      "updated_at": "2010-12-19T20:54:55Z",
      "nr_assembly_id": 75,
      "genome_id": 6,
      "source_name": "UCSC",
      "id": 1,
      "md5": "4686147fbf69556cfe74880b04cbc60a49ba5367",
      "source_id": 4,
      "created_at": "2010-04-21T18:00:45Z"
    }
  },
  {
    "assembly": {
      "name": "sacCer2",
      "bbcf_valid": true,
      "updated_at": "2010-12-19T21:12:22Z",
      "nr_assembly_id": 98,
      "genome_id": 6,
      "source_name": "UCSC",
      "id": 12,
      "md5": "074f74ecd5ab5c52296d7d12954b5e8f79504d76",
      "source_id": 4,
      "created_at": "2010-12-19T16:15:59Z"
    }
  },
  {
    "assembly": {
      "name": "SGD1.01",
      "bbcf_valid": false,
      "updated_at": "2010-12-19T21:04:53Z",
      "nr_assembly_id": 98,
      "genome_id": 6,
      "source_name": "Ensembl",
      "id": 2,
      "md5": "074f74ecd5ab5c52296d7d12954b5e8f79504d76",
      "source_id": 1,
      "created_at": "2010-04-21T18:01:06Z"
    }
  },
  {
    "assembly": {
      "name": "TAIR8",
      "bbcf_valid": true,
      "updated_at": "2010-11-26T14:59:56Z",
      "nr_assembly_id": 74,
      "genome_id": 7,
      "source_name": "TAIR",
      "id": 10,
      "md5": "9534e18182dccfb1488e777e57176cb0e56a5f25",
      "source_id": 5,
      "created_at": "2010-07-28T08:48:17Z"
    }
  }
]

**** from http://bbcftools.vital-it.ch/genrep/assemblies.json?assembly_name=ce6
[
  {
    "assembly": {
      "name": "ce6",
      "bbcf_valid": true,
      "updated_at": "2010-12-20T07:47:55Z",
      "nr_assembly_id": 103,
      "genome_id": 8,
      "source_name": "UCSC",
      "id": 14,
      "md5": "75d3de3127a40c1aa5fd835ba35984d40f3405a2",
      "source_id": 4,
      "created_at": "2010-12-19T20:52:31Z"
    }
  }
]

**** from http://bbcftools.vital-it.ch/genrep/assemblies.json?assembly_id=14
Produces the whole list, not the same as assembly_name=ce6!  Emailed Fabrice about this.
**** from http://bbcftools.vital-it.ch/genrep/chromosomes.json?assembly_name=ce6
http://bbcftools.vital-it.ch/genrep/chromosomes.json?assembly_id=14 produces the same thing.
[
  {
    "chromosome": {
      "name": "1",
      "updated_at": "2010-04-30T20:13:34Z",
      "genome_id": 8,
      "chr_type_id": 3,
      "refseq_locus": "NC_001328",
      "chr_names": [
        {
          "chr_name": {
            "updated_at": "2010-12-19T23:50:13Z",
            "id": 352,
            "value": "chrM",
            "chromosome_id": 2948,
            "assembly_id": 14,
            "created_at": "2010-12-19T23:50:13Z"
          }
        }
      ],
      "refseq_version": 1,
      "id": 2948,
      "num": 1,
      "length": 13794,
      "gi_number": 5834884,
      "created_at": "2010-04-30T20:13:34Z"
    }
  },
  {
    "chromosome": {
      "name": "2",
      "updated_at": "2010-04-30T20:13:41Z",
      "genome_id": 8,
      "chr_type_id": 1,
      "refseq_locus": "NC_003279",
      "chr_names": [
        {
          "chr_name": {
            "updated_at": "2010-12-19T23:50:13Z",
            "id": 351,
            "value": "chrI",
            "chromosome_id": 3066,
            "assembly_id": 14,
            "created_at": "2010-12-19T23:50:13Z"
          }
        }
      ],
      "refseq_version": 6,
      "id": 3066,
      "num": 2,
      "length": 15072421,
      "gi_number": 193203938,
      "created_at": "2010-04-30T20:13:41Z"
    }
  },
  {
    "chromosome": {
      "name": "3",
      "updated_at": "2010-04-30T20:13:41Z",
      "genome_id": 8,
      "chr_type_id": 1,
      "refseq_locus": "NC_003280",
      "chr_names": [
        {
          "chr_name": {
            "updated_at": "2010-12-19T23:50:13Z",
            "id": 350,
            "value": "chrII",
            "chromosome_id": 3067,
            "assembly_id": 14,
            "created_at": "2010-12-19T23:50:13Z"
          }
        }
      ],
      "refseq_version": 7,
      "id": 3067,
      "num": 3,
      "length": 15279323,
      "gi_number": 193205342,
      "created_at": "2010-04-30T20:13:41Z"
    }
  },
  {
    "chromosome": {
      "name": "4",
      "updated_at": "2010-04-30T20:13:41Z",
      "genome_id": 8,
      "chr_type_id": 1,
      "refseq_locus": "NC_003281",
      "chr_names": [
        {
          "chr_name": {
            "updated_at": "2010-12-20T07:47:55Z",
            "id": 359,
            "value": "chrIII",
            "chromosome_id": 3068,
            "assembly_id": 14,
            "created_at": "2010-12-20T07:47:55Z"
          }
        }
      ],
      "refseq_version": 8,
      "id": 3068,
      "num": 4,
      "length": 13783681,
      "gi_number": 193211354,
      "created_at": "2010-04-30T20:13:41Z"
    }
  },
  {
    "chromosome": {
      "name": "5",
      "updated_at": "2010-04-30T20:13:41Z",
      "genome_id": 8,
      "chr_type_id": 1,
      "refseq_locus": "NC_003282",
      "chr_names": [
        {
          "chr_name": {
            "updated_at": "2010-12-20T07:47:55Z",
            "id": 358,
            "value": "chrIV",
            "chromosome_id": 3069,
            "assembly_id": 14,
            "created_at": "2010-12-20T07:47:55Z"
          }
        }
      ],
      "refseq_version": 5,
      "id": 3069,
      "num": 5,
      "length": 17493785,
      "gi_number": 193207055,
      "created_at": "2010-04-30T20:13:41Z"
    }
  },
  {
    "chromosome": {
      "name": "6",
      "updated_at": "2010-04-30T20:13:41Z",
      "genome_id": 8,
      "chr_type_id": 1,
      "refseq_locus": "NC_003283",
      "chr_names": [
        {
          "chr_name": {
            "updated_at": "2010-12-19T23:50:13Z",
            "id": 348,
            "value": "chrV",
            "chromosome_id": 3070,
            "assembly_id": 14,
            "created_at": "2010-12-19T23:50:13Z"
          }
        }
      ],
      "refseq_version": 8,
      "id": 3070,
      "num": 6,
      "length": 20919568,
      "gi_number": 193209363,
      "created_at": "2010-04-30T20:13:41Z"
    }
  },
  {
    "chromosome": {
      "name": "7",
      "updated_at": "2010-04-30T20:13:41Z",
      "genome_id": 8,
      "chr_type_id": 1,
      "refseq_locus": "NC_003284",
      "chr_names": [
        {
          "chr_name": {
            "updated_at": "2010-12-19T23:50:13Z",
            "id": 349,
            "value": "chrX",
            "chromosome_id": 3071,
            "assembly_id": 14,
            "created_at": "2010-12-19T23:50:13Z"
          }
        }
      ],
      "refseq_version": 7,
      "id": 3071,
      "num": 7,
      "length": 17718854,
      "gi_number": 193211360,
      "created_at": "2010-04-30T20:13:41Z"
    }
  }
]
*** TODO Put GenRep JSON as an Assembly object in test.py to test against. :test:
***** TODO Have Jacques explain the exact structure of the chromosome JSON so I can properly represent it in Python

*** TODO Tests in test.py for GenRep.get_assembly 		       :test:
** DONE Write module docstring for genrep.py		      :documentation:
Tutorial on how to use it, what the GenRep is, how to set it up.
** TODO Make GenRep __init__ accept ConfigParser/section as well as url/root :genrep:
* EmailReport
** TODO Write class skeleton and init function for EmailReport	:emailreport:
Handle either from, to, subject, smtp_server, or config, section (default emailreport), and to
Set up Message object.  Use utf-8 charset.
** TODO Write appendBody method for EmailReport			:emailreport:
** TODO Write dump method for EmailReport that produces a dictionary of all the information :test:
** TODO Add a send method to EmailReport			:emailreport:
** TODO Formulate a test message and its dumped form, add it to test.py :test:
** TODO Write unit tests to check that dumped message is correct       :test:
** TODO Write documentation for EmailReport		      :documentation:
*** TODO Docstring for module				      :documentation:
*** TODO Docstring for EmailReport class		      :documentation:
*** TODO Docstring for EmailReport methods		      :documentation:

* DAFLIMS
** TODO Write class and constructor for DAFLIMS			    :daflims:
Either take username and password, or config and section (default "daflims").
** TODO Make DAFLIMS __init__ make sure it can connect to LIMS	    :daflims:
** TODO Track down a small file in the DAFLIMS I can fetch for testing purposes :test:
** TODO Adapt Jacques' fetch function into fetch_file		    :daflims:
def download_fastq( sample_descr, root="/scratch/frt/daily/htsserver/chipseq/" ):
    """Fetches fastq file for a given experiment from the Core Facilities LIMS, 
    saves in local directory.
    Experiment is identified by 'sample_descr' = [facility, machine, run, lane]
    """
    base_url="http://uhts-"+sample_descr[0]+".vital-it.ch"
    auth_handler = urllib2.HTTPDigestAuthHandler()
    auth_handler.add_password( realm="UHTS-LIMS-ws",
                               uri=base_url,
                               user='jrougemont',
                               passwd='cREThu6u' )
    opener = urllib2.build_opener(auth_handler)
    urllib2.install_opener(opener)
    url = "/".join([base_url,"ws","symlinkname"]+sample_descr[1:4])
    s = urllib2.urlopen(url).read()
    status = re.search(r'==(\w+)\s',s).groups()[0]
    links = re.search(r'\n(.*)\n',s).groups()[0].split("\t")
    if status == "DATA":
        link_name = links[0]
    else:
        raise ValueError("Request "+url+"\n"+links)
    url = "/".join([base_url,"ws","lanedesc"]+sample_descr[1:4])
    s = urllib2.urlopen(url).read()
    status = re.search(r'==(\w+)\s',s).groups()[0]
    lanedesc = re.search(r'\n(.*)\n',s).groups()[0].split("\t")
    if status == "DATA":
        lib_name = lanedesc[4]
    else:
        raise ValueError("Request "+url+"\n"+lanedesc)
    url = "/".join([base_url,"symlink",link_name])
    tar = tarfile.open(fileobj=urllib2.urlopen(url),mode="r|gz")
    file_loc = root+unique_filename_in(root)
    tar.extractall(path=file_loc)
    fastqname = tar.getnames()[0]
    tar.close()
    return {lib_name: file_loc+"/"+fastqname}

** TODO Write a unit test that fetches a file, md5 checks it, then deletes it :test:
Test for write_to left empty, set to a directory, and set to a filename.
** TODO Write DAFLIMS module docstring			      :documentation:
** TODO Write DAFLIMS class and method docstrings	      :documentation:

* Frontend
** TODO Unit tests for Frontend					       :test:
*** TODO Put test data for key 9pv1x7PamOj80eXnZa14 in test.py as dicts :test:
http://htsstation.vital-it.ch/rnaseq/groups.json?key=9pv1x7PamOj80eXnZa14 returned:
[
  {
    "group": {
      "name": "My first group",
      "job_id": 2,
      "control": false,
      "id": 3,
      "created_at": "2010-12-30T13:29:54Z"
    }
  },
  {
    "group": {
      "name": "Other group",
      "job_id": 2,
      "control": true,
      "id": 4,
      "created_at": "2010-12-30T13:29:54Z"
    }
  }
]
and http://htsstation.vital-it.ch/rnaseq/runs.json?key=9pv1x7PamOj80eXnZa14 returned:
[
  {
    "run": {
      "facility_name": "lgtf",
      "id": 5,
      "group_id": 3,
      "machine_name": "C3PO",
      "machine_id": 1,
      "lane_nber": 1,
      "run_nber": 36,
      "facility_location": "Lausanne",
      "created_at": "2010-12-30T13:29:54Z"
    }
  },
  {
    "run": {
      "facility_name": "lgtf",
      "id": 6,
      "group_id": 3,
      "machine_name": "C3PO",
      "machine_id": 1,
      "lane_nber": 2,
      "run_nber": 36,
      "facility_location": "Lausanne",
      "created_at": "2010-12-30T13:29:54Z"
    }
  },
  {
    "run": {
      "facility_name": "lgtf",
      "id": 7,
      "group_id": 4,
      "machine_name": "C3PO",
      "machine_id": 1,
      "lane_nber": 3,
      "run_nber": 37,
      "facility_location": "Lausanne",
      "created_at": "2010-12-30T13:29:54Z"
    }
  }
]
and http://htsstation.vital-it.ch/rnaseq/jobs/9pv1x7PamOj80eXnZa14.json for
{
  "job": {
    "remote_ip": null,
    "from_action": null,
    "bein_id": null,
    "query_string": null,
    "accept": null,
    "time": null,
    "protocol": null,
    "domain": null,
    "action": null,
    "method": null,
    "id": 2,
    "facility_id": null,
    "user_agent": null,
    "referer": null,
    "description": "Job for testing Frontend module",
    "controller": null,
    "machine_id": null,
    "path": null,
    "lane_nber": null,
    "key": "9pv1x7PamOj80eXnZa14",
    "assembly_id": 14,
    "run_nber": null,
    "input_file": null,
    "from_controller": null,
    "email": "madhadron@gmail.com",
    "created_at": "2010-12-30T13:29:54Z"
  }
}

*** TODO Write unit tests in test.py for Frontend to make sure all values are correct :test:
** TODO Write Frontend class with __init__ that checks for ConfigParser or url :frontend:
** TODO Make Frontend __init__ query Fabrice's URLs and set local fields from them :frontend:
** TODO Write module docstring for frontend.py		      :documentation: